import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { CounterState } from './counter.types';

// Define the initial state using that type
const initialState: CounterState = {
  value: 0
};

// Create a Redux slice with the name 'counter'
export const counter = createSlice({
  name: 'counter',
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  reducers: {
    increment: state => {
      // Increment the value by 1
      state.value += 1;
    },
    decrement: state => {
      // Decrement the value by 1
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      // Increment the value by the amount specified in `action.payload`
      state.value += action.payload;
    }
  }
});

// Export the action creators generated by `createSlice`
export const { increment, decrement, incrementByAmount } = counter.actions;

// Export the reducer generated by `createSlice`
export default counter.reducer;

/*
In this code, we define a Redux slice called 'counter' with an initial state of `{ value: 0 }`. 
The slice has three reducers: `increment`, `decrement`, and `incrementByAmount`. 
Each reducer modifies the state in a specific way.

The `increment` reducer increments the value by 1.

The `decrement` reducer decrements the value by 1.

The `incrementByAmount` reducer takes an action with a payload of type `number` and increments the value by that amount.

The `createSlice` function generates action creators and a reducer for us.
 We export the action creators and the reducer so that they can be used in other parts of our application..</s>
*/
